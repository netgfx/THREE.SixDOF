{"version":3,"file":"viewer.js","sourceRoot":"","sources":["../../src/components/viewer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Object3D,\n  ShaderMaterial,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n  NearestFilter,\n  LinearFilter,\n  RGBAFormat,\n  SRGBColorSpace,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style, MeshDensity, TextureType, Props } from './constants'\n\nexport default class Viewer extends Object3D {\n  /** Default props if not provided */\n  private props: Props = new Props()\n\n  private static geometry: SphereBufferGeometry\n  private material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(texture: Texture, depth?: Texture, props?: object) {\n    super()\n\n    /** Assign the user provided props, if any */\n    this.setProps(this.props, props)\n\n    // /** Add the compiler definitions needed to pick the right GLSL methods */\n    this.setShaderDefines(this.material, [TextureType[this.props.type]])\n\n    /**\n     * Create the geometry only once, it can be shared between instances\n     *  of the viewer since it's kept as a static class member\n     **/\n    if (!Viewer.geometry) {\n      Viewer.geometry = this.createSphereGeometry(\n        this.props.radius,\n        this.props.density,\n      )\n    }\n\n    /** Assign the textures and update the shader uniforms */\n    this.assignTexture(this.props.type, texture, depth)\n\n    /** Set the displacement using the public setter */\n    this.displacement = this.props.displacement\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    super.add(this.createMesh(Viewer.geometry, this.material, this.props.style))\n  }\n\n  /** Small util to set the defines of the GLSL program based on textureType */\n  private setShaderDefines(\n    material: ShaderMaterial,\n    defines: Array<string>,\n  ): void {\n    defines.forEach(define => (material.defines[define] = ''))\n  }\n\n  /** Internal util to create buffer geometry */\n  private createSphereGeometry(\n    radius: number,\n    meshDensity: MeshDensity,\n  ): SphereBufferGeometry {\n    return new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal util to set viewer props from config object */\n  private setProps(viewerProps: Props, userProps?: object): void {\n    if (!userProps) return\n\n    /** Iterate over user provided props and assign to viewer props */\n    for (let prop in userProps) {\n      if (viewerProps[prop]) {\n        viewerProps[prop] = userProps[prop]\n      } else {\n        console.warn(\n          `THREE.SixDOF: Provided ${prop} in config but it is not a valid property and being ignored`,\n        )\n      }\n    }\n  }\n\n  /** Internal util to assign the textures to the shader uniforms */\n  private assignTexture(\n    type: TextureType,\n    colorTexture: Texture,\n    depthTexture?: Texture,\n  ): void {\n    /** Check wheter we are rendering top bottom or just single textures */\n    if (type === TextureType.SEPERATE) {\n      if (!depthTexture)\n        throw new Error(\n          'When using seperate texture type, depthmap must be provided',\n        )\n      this.depth = this.setDefaultTextureProps(depthTexture)\n    }\n\n    /** Assign the main texture */\n    this.texture = this.setDefaultTextureProps(colorTexture)\n  }\n\n  private setDefaultTextureProps(texture: Texture): Texture {\n    texture.minFilter = NearestFilter\n    texture.magFilter = LinearFilter\n    texture.format = RGBAFormat\n    texture.colorSpace = SRGBColorSpace\n    texture.generateMipmaps = false\n    return texture\n  }\n\n  /** An internal util to create the Mesh Object3D */\n  private createMesh(\n    geo: SphereBufferGeometry,\n    mat: ShaderMaterial,\n    style: Style,\n  ): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        if (!this.material.wireframe) this.material.wireframe = true\n        return new Mesh(geo, mat)\n      case Style.MESH:\n        if (this.material.wireframe) this.material.wireframe = false\n        return new Mesh(geo, mat)\n      case Style.POINTS:\n        return new Points(geo, mat)\n    }\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public set displacement(val: number) {\n    this.material.uniforms.displacement.value = val\n  }\n\n  /** Setter for depthmap uniform */\n  public set depth(map: Texture) {\n    this.material.uniforms.depthTexture.value = map\n  }\n\n  /** Setter for depthmap uniform */\n  public set texture(map: Texture) {\n    this.material.uniforms.colorTexture.value = map\n  }\n\n  /** Setter for the opacity */\n  public set opacity(val: number) {\n    this.material.uniforms.opacity.value = val\n  }\n\n  /** Setter for the point size */\n  public set pointSize(val: number) {\n    this.material.uniforms.pointSize.value = val\n  }\n\n  /** Getter for the current viewer props */\n  public get config(): Props {\n    return this.props\n  }\n\n  /** Getter for the opacity */\n  public get opacity(): number {\n    return this.material.uniforms.opacity.value\n  }\n\n  /** Getter for the point size */\n  public get pointSize(): number {\n    return this.material.uniforms.pointSize.value\n  }\n\n  /** Getter for displacement amount */\n  public get displacement(): number {\n    return this.material.uniforms.displacement.value\n  }\n\n  /** Getter for texture */\n  public get texture(): Texture {\n    return this.material.uniforms.colorTexture.value\n  }\n\n  /** Getter for the depth texture */\n  public get depth(): Texture {\n    return this.material.uniforms.opacity.value\n  }\n}\n"]}